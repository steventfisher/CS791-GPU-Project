import subprocess
import time
import random

def genConfig(numNodes):
    print('*'*40)
    print('Generating BRITE Config File')
    print('*'*40)
    outputFile = open('../BRITE/MyConfig.conf', 'w+')
    outputFile.write('''#This config file was generated by the GUI.

		BriteConfig
	
		BeginModel
			Name =  2		 #Router Barabasi=2, AS Barabasi =4
			N = %s			 #Number of nodes in graph
			HS = 1000		 #Size of main plane (number of squares)
			LS = 100		 #Size of inner planes (number of squares)
			NodePlacement = 1	 #Random = 1, Heavy Tailed = 2
			m = 2			 #Number of neighboring node each new node connects to.
			BWDist = 1		 #Constant = 1, Uniform =2, HeavyTailed = 3, Exponential =4
			BWMin = 10.0
			BWMax = 1024.0
		EndModel		
		
		
		BeginOutput 			#**Atleast one of these options should have value 1**
			BRITE = 1		#0 = Do not save as BRITE, 1 = save as BRITE.
			OTTER = 0		#0 = Do not visualize with Otter, 1 = Visualize
			DML = 0			#1/0=enable/disable output to SSFNet's DML format
			NS = 0			#1/0=enable/disable output to NS-2
			Javasim = 0		#1/0=enable/disable output to Javasim
		EndOutput
''' % numNodes)
    outputFile.close()
    dataFile = numNodes + ".brite"
    time.sleep(5)
    print("Config File saved")
    p = subprocess.Popen("cd ../BRITE && java -Xmx6144M -classpath Java/:../:. Main.Brite  MyConfig.conf %s seed_file" % str(numNodes), shell=True)
    p.wait()
    p2 = subprocess.Popen("mv ../BRITE/%s ../data/" % dataFile, shell=True)
    p2.wait()
    print('*'*40)
    print("Adding Weights to Edges")
    print('*'*40)
    parseData(dataFile)

def parseData(file):
    df = open(file, "r+")
    tmpName = file.split('.')
    outputName = tmpName[0] + "tmp.txt"
    df2 = open(outputName, "w+")
    for line in df:
        left = line.split('\t')
        if left[0] == 'NODES' or left[0] == 'EDGES':
            df2.write(left[0] + "\t" + left[1].strip() + "\n")
	else:
            i = random.random()
	    #print(i)
	    if i < 0.1:
		
               	df2.write(left[0] + "\t" + left[1].strip() + "\t" + left[2].strip() + "\t" + str(random.randint(1,5)) + "\n")
    	    else:
	        df2.write(left[0] + "\t" + left[1].strip() + "\t" + left[2].strip() + "\t" + "1\n")

    df.close()
    df2.close()
    p = subprocess.Popen("mv " + outputName + " " + file, shell=True)
    p.wait()
    #print(outputName + " was removed")



if __name__ == '__main__':
    file = open('nodeFile.txt', "r+")
    for line in file:
        tmp = line.strip()
        numNodes = tmp
        genConfig(numNodes)
        time.sleep(3)
    file.close()
        
                     
